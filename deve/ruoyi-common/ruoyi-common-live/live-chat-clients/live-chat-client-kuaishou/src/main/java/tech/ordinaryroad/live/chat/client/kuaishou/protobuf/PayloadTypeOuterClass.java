/*
 * MIT License
 *
 * Copyright (c) 2023 OrdinaryRoad
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PayloadType.proto

package tech.ordinaryroad.live.chat.client.kuaishou.protobuf;

public final class PayloadTypeOuterClass {
  private PayloadTypeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code PayloadType}
   */
  public enum PayloadType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>CS_HEARTBEAT = 1;</code>
     */
    CS_HEARTBEAT(1),
    /**
     * <code>CS_ERROR = 3;</code>
     */
    CS_ERROR(3),
    /**
     * <code>CS_PING = 4;</code>
     */
    CS_PING(4),
    /**
     * <code>PS_HOST_INFO = 51;</code>
     */
    PS_HOST_INFO(51),
    /**
     * <code>SC_HEARTBEAT_ACK = 101;</code>
     */
    SC_HEARTBEAT_ACK(101),
    /**
     * <code>SC_ECHO = 102;</code>
     */
    SC_ECHO(102),
    /**
     * <code>SC_ERROR = 103;</code>
     */
    SC_ERROR(103),
    /**
     * <code>SC_PING_ACK = 104;</code>
     */
    SC_PING_ACK(104),
    /**
     * <code>SC_INFO = 105;</code>
     */
    SC_INFO(105),
    /**
     * <code>CS_ENTER_ROOM = 200;</code>
     */
    CS_ENTER_ROOM(200),
    /**
     * <code>CS_USER_PAUSE = 201;</code>
     */
    CS_USER_PAUSE(201),
    /**
     * <code>CS_USER_EXIT = 202;</code>
     */
    CS_USER_EXIT(202),
    /**
     * <code>CS_AUTHOR_PUSH_TRAFFIC_ZERO = 203;</code>
     */
    CS_AUTHOR_PUSH_TRAFFIC_ZERO(203),
    /**
     * <code>CS_HORSE_RACING = 204;</code>
     */
    CS_HORSE_RACING(204),
    /**
     * <code>CS_RACE_LOSE = 205;</code>
     */
    CS_RACE_LOSE(205),
    /**
     * <code>CS_VOIP_SIGNAL = 206;</code>
     */
    CS_VOIP_SIGNAL(206),
    /**
     * <code>SC_ENTER_ROOM_ACK = 300;</code>
     */
    SC_ENTER_ROOM_ACK(300),
    /**
     * <code>SC_AUTHOR_PAUSE = 301;</code>
     */
    SC_AUTHOR_PAUSE(301),
    /**
     * <code>SC_AUTHOR_RESUME = 302;</code>
     */
    SC_AUTHOR_RESUME(302),
    /**
     * <code>SC_AUTHOR_PUSH_TRAFFIC_ZERO = 303;</code>
     */
    SC_AUTHOR_PUSH_TRAFFIC_ZERO(303),
    /**
     * <code>SC_AUTHOR_HEARTBEAT_MISS = 304;</code>
     */
    SC_AUTHOR_HEARTBEAT_MISS(304),
    /**
     * <code>SC_PIP_STARTED = 305;</code>
     */
    SC_PIP_STARTED(305),
    /**
     * <code>SC_PIP_ENDED = 306;</code>
     */
    SC_PIP_ENDED(306),
    /**
     * <code>SC_HORSE_RACING_ACK = 307;</code>
     */
    SC_HORSE_RACING_ACK(307),
    /**
     * <code>SC_VOIP_SIGNAL = 308;</code>
     */
    SC_VOIP_SIGNAL(308),
    /**
     * <code>SC_FEED_PUSH = 310;</code>
     */
    SC_FEED_PUSH(310),
    /**
     * <code>SC_ASSISTANT_STATUS = 311;</code>
     */
    SC_ASSISTANT_STATUS(311),
    /**
     * <code>SC_REFRESH_WALLET = 312;</code>
     */
    SC_REFRESH_WALLET(312),
    /**
     * <code>SC_LIVE_CHAT_CALL = 320;</code>
     */
    SC_LIVE_CHAT_CALL(320),
    /**
     * <code>SC_LIVE_CHAT_CALL_ACCEPTED = 321;</code>
     */
    SC_LIVE_CHAT_CALL_ACCEPTED(321),
    /**
     * <code>SC_LIVE_CHAT_CALL_REJECTED = 322;</code>
     */
    SC_LIVE_CHAT_CALL_REJECTED(322),
    /**
     * <code>SC_LIVE_CHAT_READY = 323;</code>
     */
    SC_LIVE_CHAT_READY(323),
    /**
     * <code>SC_LIVE_CHAT_GUEST_END = 324;</code>
     */
    SC_LIVE_CHAT_GUEST_END(324),
    /**
     * <code>SC_LIVE_CHAT_ENDED = 325;</code>
     */
    SC_LIVE_CHAT_ENDED(325),
    /**
     * <code>SC_RENDERING_MAGIC_FACE_DISABLE = 326;</code>
     */
    SC_RENDERING_MAGIC_FACE_DISABLE(326),
    /**
     * <code>SC_RENDERING_MAGIC_FACE_ENABLE = 327;</code>
     */
    SC_RENDERING_MAGIC_FACE_ENABLE(327),
    /**
     * <code>SC_RED_PACK_FEED = 330;</code>
     */
    SC_RED_PACK_FEED(330),
    /**
     * <code>SC_LIVE_WATCHING_LIST = 340;</code>
     */
    SC_LIVE_WATCHING_LIST(340),
    /**
     * <code>SC_LIVE_QUIZ_QUESTION_ASKED = 350;</code>
     */
    SC_LIVE_QUIZ_QUESTION_ASKED(350),
    /**
     * <code>SC_LIVE_QUIZ_QUESTION_REVIEWED = 351;</code>
     */
    SC_LIVE_QUIZ_QUESTION_REVIEWED(351),
    /**
     * <code>SC_LIVE_QUIZ_SYNC = 352;</code>
     */
    SC_LIVE_QUIZ_SYNC(352),
    /**
     * <code>SC_LIVE_QUIZ_ENDED = 353;</code>
     */
    SC_LIVE_QUIZ_ENDED(353),
    /**
     * <code>SC_LIVE_QUIZ_WINNERS = 354;</code>
     */
    SC_LIVE_QUIZ_WINNERS(354),
    /**
     * <code>SC_SUSPECTED_VIOLATION = 355;</code>
     */
    SC_SUSPECTED_VIOLATION(355),
    /**
     * <code>SC_SHOP_OPENED = 360;</code>
     */
    SC_SHOP_OPENED(360),
    /**
     * <code>SC_SHOP_CLOSED = 361;</code>
     */
    SC_SHOP_CLOSED(361),
    /**
     * <code>SC_GUESS_OPENED = 370;</code>
     */
    SC_GUESS_OPENED(370),
    /**
     * <code>SC_GUESS_CLOSED = 371;</code>
     */
    SC_GUESS_CLOSED(371),
    /**
     * <code>SC_PK_INVITATION = 380;</code>
     */
    SC_PK_INVITATION(380),
    /**
     * <code>SC_PK_STATISTIC = 381;</code>
     */
    SC_PK_STATISTIC(381),
    /**
     * <code>SC_RIDDLE_OPENED = 390;</code>
     */
    SC_RIDDLE_OPENED(390),
    /**
     * <code>SC_RIDDLE_CLOESED = 391;</code>
     */
    SC_RIDDLE_CLOESED(391),
    /**
     * <code>SC_RIDE_CHANGED = 412;</code>
     */
    SC_RIDE_CHANGED(412),
    /**
     * <code>SC_BET_CHANGED = 441;</code>
     */
    SC_BET_CHANGED(441),
    /**
     * <code>SC_BET_CLOSED = 442;</code>
     */
    SC_BET_CLOSED(442),
    /**
     * <code>SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE = 645;</code>
     */
    SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE(645),
    /**
     * <code>SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE = 758;</code>
     */
    SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE(758),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>CS_HEARTBEAT = 1;</code>
     */
    public static final int CS_HEARTBEAT_VALUE = 1;
    /**
     * <code>CS_ERROR = 3;</code>
     */
    public static final int CS_ERROR_VALUE = 3;
    /**
     * <code>CS_PING = 4;</code>
     */
    public static final int CS_PING_VALUE = 4;
    /**
     * <code>PS_HOST_INFO = 51;</code>
     */
    public static final int PS_HOST_INFO_VALUE = 51;
    /**
     * <code>SC_HEARTBEAT_ACK = 101;</code>
     */
    public static final int SC_HEARTBEAT_ACK_VALUE = 101;
    /**
     * <code>SC_ECHO = 102;</code>
     */
    public static final int SC_ECHO_VALUE = 102;
    /**
     * <code>SC_ERROR = 103;</code>
     */
    public static final int SC_ERROR_VALUE = 103;
    /**
     * <code>SC_PING_ACK = 104;</code>
     */
    public static final int SC_PING_ACK_VALUE = 104;
    /**
     * <code>SC_INFO = 105;</code>
     */
    public static final int SC_INFO_VALUE = 105;
    /**
     * <code>CS_ENTER_ROOM = 200;</code>
     */
    public static final int CS_ENTER_ROOM_VALUE = 200;
    /**
     * <code>CS_USER_PAUSE = 201;</code>
     */
    public static final int CS_USER_PAUSE_VALUE = 201;
    /**
     * <code>CS_USER_EXIT = 202;</code>
     */
    public static final int CS_USER_EXIT_VALUE = 202;
    /**
     * <code>CS_AUTHOR_PUSH_TRAFFIC_ZERO = 203;</code>
     */
    public static final int CS_AUTHOR_PUSH_TRAFFIC_ZERO_VALUE = 203;
    /**
     * <code>CS_HORSE_RACING = 204;</code>
     */
    public static final int CS_HORSE_RACING_VALUE = 204;
    /**
     * <code>CS_RACE_LOSE = 205;</code>
     */
    public static final int CS_RACE_LOSE_VALUE = 205;
    /**
     * <code>CS_VOIP_SIGNAL = 206;</code>
     */
    public static final int CS_VOIP_SIGNAL_VALUE = 206;
    /**
     * <code>SC_ENTER_ROOM_ACK = 300;</code>
     */
    public static final int SC_ENTER_ROOM_ACK_VALUE = 300;
    /**
     * <code>SC_AUTHOR_PAUSE = 301;</code>
     */
    public static final int SC_AUTHOR_PAUSE_VALUE = 301;
    /**
     * <code>SC_AUTHOR_RESUME = 302;</code>
     */
    public static final int SC_AUTHOR_RESUME_VALUE = 302;
    /**
     * <code>SC_AUTHOR_PUSH_TRAFFIC_ZERO = 303;</code>
     */
    public static final int SC_AUTHOR_PUSH_TRAFFIC_ZERO_VALUE = 303;
    /**
     * <code>SC_AUTHOR_HEARTBEAT_MISS = 304;</code>
     */
    public static final int SC_AUTHOR_HEARTBEAT_MISS_VALUE = 304;
    /**
     * <code>SC_PIP_STARTED = 305;</code>
     */
    public static final int SC_PIP_STARTED_VALUE = 305;
    /**
     * <code>SC_PIP_ENDED = 306;</code>
     */
    public static final int SC_PIP_ENDED_VALUE = 306;
    /**
     * <code>SC_HORSE_RACING_ACK = 307;</code>
     */
    public static final int SC_HORSE_RACING_ACK_VALUE = 307;
    /**
     * <code>SC_VOIP_SIGNAL = 308;</code>
     */
    public static final int SC_VOIP_SIGNAL_VALUE = 308;
    /**
     * <code>SC_FEED_PUSH = 310;</code>
     */
    public static final int SC_FEED_PUSH_VALUE = 310;
    /**
     * <code>SC_ASSISTANT_STATUS = 311;</code>
     */
    public static final int SC_ASSISTANT_STATUS_VALUE = 311;
    /**
     * <code>SC_REFRESH_WALLET = 312;</code>
     */
    public static final int SC_REFRESH_WALLET_VALUE = 312;
    /**
     * <code>SC_LIVE_CHAT_CALL = 320;</code>
     */
    public static final int SC_LIVE_CHAT_CALL_VALUE = 320;
    /**
     * <code>SC_LIVE_CHAT_CALL_ACCEPTED = 321;</code>
     */
    public static final int SC_LIVE_CHAT_CALL_ACCEPTED_VALUE = 321;
    /**
     * <code>SC_LIVE_CHAT_CALL_REJECTED = 322;</code>
     */
    public static final int SC_LIVE_CHAT_CALL_REJECTED_VALUE = 322;
    /**
     * <code>SC_LIVE_CHAT_READY = 323;</code>
     */
    public static final int SC_LIVE_CHAT_READY_VALUE = 323;
    /**
     * <code>SC_LIVE_CHAT_GUEST_END = 324;</code>
     */
    public static final int SC_LIVE_CHAT_GUEST_END_VALUE = 324;
    /**
     * <code>SC_LIVE_CHAT_ENDED = 325;</code>
     */
    public static final int SC_LIVE_CHAT_ENDED_VALUE = 325;
    /**
     * <code>SC_RENDERING_MAGIC_FACE_DISABLE = 326;</code>
     */
    public static final int SC_RENDERING_MAGIC_FACE_DISABLE_VALUE = 326;
    /**
     * <code>SC_RENDERING_MAGIC_FACE_ENABLE = 327;</code>
     */
    public static final int SC_RENDERING_MAGIC_FACE_ENABLE_VALUE = 327;
    /**
     * <code>SC_RED_PACK_FEED = 330;</code>
     */
    public static final int SC_RED_PACK_FEED_VALUE = 330;
    /**
     * <code>SC_LIVE_WATCHING_LIST = 340;</code>
     */
    public static final int SC_LIVE_WATCHING_LIST_VALUE = 340;
    /**
     * <code>SC_LIVE_QUIZ_QUESTION_ASKED = 350;</code>
     */
    public static final int SC_LIVE_QUIZ_QUESTION_ASKED_VALUE = 350;
    /**
     * <code>SC_LIVE_QUIZ_QUESTION_REVIEWED = 351;</code>
     */
    public static final int SC_LIVE_QUIZ_QUESTION_REVIEWED_VALUE = 351;
    /**
     * <code>SC_LIVE_QUIZ_SYNC = 352;</code>
     */
    public static final int SC_LIVE_QUIZ_SYNC_VALUE = 352;
    /**
     * <code>SC_LIVE_QUIZ_ENDED = 353;</code>
     */
    public static final int SC_LIVE_QUIZ_ENDED_VALUE = 353;
    /**
     * <code>SC_LIVE_QUIZ_WINNERS = 354;</code>
     */
    public static final int SC_LIVE_QUIZ_WINNERS_VALUE = 354;
    /**
     * <code>SC_SUSPECTED_VIOLATION = 355;</code>
     */
    public static final int SC_SUSPECTED_VIOLATION_VALUE = 355;
    /**
     * <code>SC_SHOP_OPENED = 360;</code>
     */
    public static final int SC_SHOP_OPENED_VALUE = 360;
    /**
     * <code>SC_SHOP_CLOSED = 361;</code>
     */
    public static final int SC_SHOP_CLOSED_VALUE = 361;
    /**
     * <code>SC_GUESS_OPENED = 370;</code>
     */
    public static final int SC_GUESS_OPENED_VALUE = 370;
    /**
     * <code>SC_GUESS_CLOSED = 371;</code>
     */
    public static final int SC_GUESS_CLOSED_VALUE = 371;
    /**
     * <code>SC_PK_INVITATION = 380;</code>
     */
    public static final int SC_PK_INVITATION_VALUE = 380;
    /**
     * <code>SC_PK_STATISTIC = 381;</code>
     */
    public static final int SC_PK_STATISTIC_VALUE = 381;
    /**
     * <code>SC_RIDDLE_OPENED = 390;</code>
     */
    public static final int SC_RIDDLE_OPENED_VALUE = 390;
    /**
     * <code>SC_RIDDLE_CLOESED = 391;</code>
     */
    public static final int SC_RIDDLE_CLOESED_VALUE = 391;
    /**
     * <code>SC_RIDE_CHANGED = 412;</code>
     */
    public static final int SC_RIDE_CHANGED_VALUE = 412;
    /**
     * <code>SC_BET_CHANGED = 441;</code>
     */
    public static final int SC_BET_CHANGED_VALUE = 441;
    /**
     * <code>SC_BET_CLOSED = 442;</code>
     */
    public static final int SC_BET_CLOSED_VALUE = 442;
    /**
     * <code>SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE = 645;</code>
     */
    public static final int SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE_VALUE = 645;
    /**
     * <code>SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE = 758;</code>
     */
    public static final int SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE_VALUE = 758;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PayloadType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PayloadType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return CS_HEARTBEAT;
        case 3: return CS_ERROR;
        case 4: return CS_PING;
        case 51: return PS_HOST_INFO;
        case 101: return SC_HEARTBEAT_ACK;
        case 102: return SC_ECHO;
        case 103: return SC_ERROR;
        case 104: return SC_PING_ACK;
        case 105: return SC_INFO;
        case 200: return CS_ENTER_ROOM;
        case 201: return CS_USER_PAUSE;
        case 202: return CS_USER_EXIT;
        case 203: return CS_AUTHOR_PUSH_TRAFFIC_ZERO;
        case 204: return CS_HORSE_RACING;
        case 205: return CS_RACE_LOSE;
        case 206: return CS_VOIP_SIGNAL;
        case 300: return SC_ENTER_ROOM_ACK;
        case 301: return SC_AUTHOR_PAUSE;
        case 302: return SC_AUTHOR_RESUME;
        case 303: return SC_AUTHOR_PUSH_TRAFFIC_ZERO;
        case 304: return SC_AUTHOR_HEARTBEAT_MISS;
        case 305: return SC_PIP_STARTED;
        case 306: return SC_PIP_ENDED;
        case 307: return SC_HORSE_RACING_ACK;
        case 308: return SC_VOIP_SIGNAL;
        case 310: return SC_FEED_PUSH;
        case 311: return SC_ASSISTANT_STATUS;
        case 312: return SC_REFRESH_WALLET;
        case 320: return SC_LIVE_CHAT_CALL;
        case 321: return SC_LIVE_CHAT_CALL_ACCEPTED;
        case 322: return SC_LIVE_CHAT_CALL_REJECTED;
        case 323: return SC_LIVE_CHAT_READY;
        case 324: return SC_LIVE_CHAT_GUEST_END;
        case 325: return SC_LIVE_CHAT_ENDED;
        case 326: return SC_RENDERING_MAGIC_FACE_DISABLE;
        case 327: return SC_RENDERING_MAGIC_FACE_ENABLE;
        case 330: return SC_RED_PACK_FEED;
        case 340: return SC_LIVE_WATCHING_LIST;
        case 350: return SC_LIVE_QUIZ_QUESTION_ASKED;
        case 351: return SC_LIVE_QUIZ_QUESTION_REVIEWED;
        case 352: return SC_LIVE_QUIZ_SYNC;
        case 353: return SC_LIVE_QUIZ_ENDED;
        case 354: return SC_LIVE_QUIZ_WINNERS;
        case 355: return SC_SUSPECTED_VIOLATION;
        case 360: return SC_SHOP_OPENED;
        case 361: return SC_SHOP_CLOSED;
        case 370: return SC_GUESS_OPENED;
        case 371: return SC_GUESS_CLOSED;
        case 380: return SC_PK_INVITATION;
        case 381: return SC_PK_STATISTIC;
        case 390: return SC_RIDDLE_OPENED;
        case 391: return SC_RIDDLE_CLOESED;
        case 412: return SC_RIDE_CHANGED;
        case 441: return SC_BET_CHANGED;
        case 442: return SC_BET_CLOSED;
        case 645: return SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE;
        case 758: return SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PayloadType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PayloadType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PayloadType>() {
            public PayloadType findValueByNumber(int number) {
              return PayloadType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return tech.ordinaryroad.live.chat.client.kuaishou.protobuf.PayloadTypeOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final PayloadType[] VALUES = values();

    public static PayloadType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PayloadType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PayloadType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021PayloadType.proto*\213\013\n\013PayloadType\022\013\n\007U" +
      "NKNOWN\020\000\022\020\n\014CS_HEARTBEAT\020\001\022\014\n\010CS_ERROR\020\003" +
      "\022\013\n\007CS_PING\020\004\022\020\n\014PS_HOST_INFO\0203\022\024\n\020SC_HE" +
      "ARTBEAT_ACK\020e\022\013\n\007SC_ECHO\020f\022\014\n\010SC_ERROR\020g" +
      "\022\017\n\013SC_PING_ACK\020h\022\013\n\007SC_INFO\020i\022\022\n\rCS_ENT" +
      "ER_ROOM\020\310\001\022\022\n\rCS_USER_PAUSE\020\311\001\022\021\n\014CS_USE" +
      "R_EXIT\020\312\001\022 \n\033CS_AUTHOR_PUSH_TRAFFIC_ZERO" +
      "\020\313\001\022\024\n\017CS_HORSE_RACING\020\314\001\022\021\n\014CS_RACE_LOS" +
      "E\020\315\001\022\023\n\016CS_VOIP_SIGNAL\020\316\001\022\026\n\021SC_ENTER_RO" +
      "OM_ACK\020\254\002\022\024\n\017SC_AUTHOR_PAUSE\020\255\002\022\025\n\020SC_AU" +
      "THOR_RESUME\020\256\002\022 \n\033SC_AUTHOR_PUSH_TRAFFIC" +
      "_ZERO\020\257\002\022\035\n\030SC_AUTHOR_HEARTBEAT_MISS\020\260\002\022" +
      "\023\n\016SC_PIP_STARTED\020\261\002\022\021\n\014SC_PIP_ENDED\020\262\002\022" +
      "\030\n\023SC_HORSE_RACING_ACK\020\263\002\022\023\n\016SC_VOIP_SIG" +
      "NAL\020\264\002\022\021\n\014SC_FEED_PUSH\020\266\002\022\030\n\023SC_ASSISTAN" +
      "T_STATUS\020\267\002\022\026\n\021SC_REFRESH_WALLET\020\270\002\022\026\n\021S" +
      "C_LIVE_CHAT_CALL\020\300\002\022\037\n\032SC_LIVE_CHAT_CALL" +
      "_ACCEPTED\020\301\002\022\037\n\032SC_LIVE_CHAT_CALL_REJECT" +
      "ED\020\302\002\022\027\n\022SC_LIVE_CHAT_READY\020\303\002\022\033\n\026SC_LIV" +
      "E_CHAT_GUEST_END\020\304\002\022\027\n\022SC_LIVE_CHAT_ENDE" +
      "D\020\305\002\022$\n\037SC_RENDERING_MAGIC_FACE_DISABLE\020" +
      "\306\002\022#\n\036SC_RENDERING_MAGIC_FACE_ENABLE\020\307\002\022" +
      "\025\n\020SC_RED_PACK_FEED\020\312\002\022\032\n\025SC_LIVE_WATCHI" +
      "NG_LIST\020\324\002\022 \n\033SC_LIVE_QUIZ_QUESTION_ASKE" +
      "D\020\336\002\022#\n\036SC_LIVE_QUIZ_QUESTION_REVIEWED\020\337" +
      "\002\022\026\n\021SC_LIVE_QUIZ_SYNC\020\340\002\022\027\n\022SC_LIVE_QUI" +
      "Z_ENDED\020\341\002\022\031\n\024SC_LIVE_QUIZ_WINNERS\020\342\002\022\033\n" +
      "\026SC_SUSPECTED_VIOLATION\020\343\002\022\023\n\016SC_SHOP_OP" +
      "ENED\020\350\002\022\023\n\016SC_SHOP_CLOSED\020\351\002\022\024\n\017SC_GUESS" +
      "_OPENED\020\362\002\022\024\n\017SC_GUESS_CLOSED\020\363\002\022\025\n\020SC_P" +
      "K_INVITATION\020\374\002\022\024\n\017SC_PK_STATISTIC\020\375\002\022\025\n" +
      "\020SC_RIDDLE_OPENED\020\206\003\022\026\n\021SC_RIDDLE_CLOESE" +
      "D\020\207\003\022\024\n\017SC_RIDE_CHANGED\020\234\003\022\023\n\016SC_BET_CHA" +
      "NGED\020\271\003\022\022\n\rSC_BET_CLOSED\020\272\003\022)\n$SC_LIVE_S" +
      "PECIAL_ACCOUNT_CONFIG_STATE\020\205\005\0221\n,SC_LIV" +
      "E_WARNING_MASK_STATUS_CHANGED_AUDIENCE\020\366" +
      "\005B6\n4tech.ordinaryroad.live.chat.client." +
      "kuaishou.protobufb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
